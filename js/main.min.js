"use strict";const settings={game_name:"PointRanks",savefile_name:"PointRanksSave",save:!0,auto_save:10,fps:60};let[player,nosave]=[{},{}];function getDefaultPlayerValues(){let e={};return e.points=[],e.pmt=x(1),e.pfnr=x(0),e.firstVisit=Date.now(),e}function setNosaveValues(){nosave.lastLoop=Date.now(),nosave.lastSave=Date.now()}const rankNames=[" ","Super","Mega","Ultra","Omega","Extreme","Insane","Void","Impossible","Royal","Divine","Epic","Legendary","Mythical","Unique","Colossal","Grand","Exotic","Ethereal","Crazy","Mysterious","Cosmic","Brilliant","Astonishing","Delightful","Copacetic"],main_functions={updates:{update(e,t){e.html()!==t&&e.html(t)},updatePointRanks(){player.points.forEach((e,t)=>{if(t<6){let[a,n,s]=[255*SimpleFastCounter32(MurmurHash3(`r${t} 50`)())(),255*SimpleFastCounter32(MurmurHash3(`g${t} 50`)())(),255*SimpleFastCounter32(MurmurHash3(`b${t} 50`)())()];[a,n,s]=[Math.floor(a),Math.floor(n),Math.floor(s)];let o=rankNames?.[t]||t;this.update($($("#points-container").children()[t]),`<span style="color: rgb(${a}, ${n}, ${s})">${o} Points: ${abb_int(e)}</span>`)}else{let[l,p,i,r,u,c]=[255*SimpleFastCounter32(MurmurHash3(`r${t} 50`)())(),255*SimpleFastCounter32(MurmurHash3(`r-2 ${t} 50`)())(),255*SimpleFastCounter32(MurmurHash3(`g${t} 50`)())(),255*SimpleFastCounter32(MurmurHash3(`g-2 ${t} 50`)())(),255*SimpleFastCounter32(MurmurHash3(`b${t} 50`)())(),255*SimpleFastCounter32(MurmurHash3(`b-2 ${t} 50`)())()];[l,p,i,r,u,c]=[Math.floor(l),Math.floor(p),Math.floor(i),Math.floor(r),Math.floor(u),Math.floor(c)];let y=rankNames?.[t]||t;this.update($($("#points-container").children()[t]),`<span class="text-gradient" style="background: linear-gradient(rgb(${l}, ${i}, ${u}), rgb(${p}, ${r}, ${c}))">${y} Points: ${abb_int(e)}</span>`)}})},time(){this.update($("#time"),`${player.pmt.gt(1)?`<span class="dark">${abb(player.pmt,3)}x</span>`:""}<br> ${msToTime(Date.now()-player.firstVisit)}`)},rank(){this.update($("#rank"),`For next rank: <span class="size-150">${abb_int(player.pfnr)}</span>`)},updateAll(){for(let e in updates)["update","updateAll"].includes(e)||updates[e]()}},gameFunctions:{add_point_layer(e=!0){e&&player.points.push(x(0));let t=$(`<p class="points" id="points-${player.points.length}"></p>`);$("#points-container").append(t)}}},get=main_functions.get,updates=main_functions.updates,gameFunctions=main_functions.gameFunctions;function mainLoop(){let e=Date.now()-player.firstVisit;player.pmt=e>36e5?x(3).pow(x(e).div(36e5).log(10)):x(1),player.points[0]=player.points[0].plus(x(1).plus(player.points.length>=2?player.points[1]:0).div(settings.fps).times(player.pmt)),player.points.forEach((e,t)=>{let a=x(10).pow(x(t+1).min(5)).times(x(2).pow(x(t-4).max(0))).softcap("5e6",.5,"pow").softcap("1e8",.5,"pow");t===player.points.length-1&&(player.pfnr=a),player.points[t].gte(a)&&(player.points[t]=player.points[t].minus(a),t===player.points.length-1&&gameFunctions.add_point_layer(),player.points[t+1]=player.points[t+1].plus(x(1).plus(t<player.points.length-2?player.points?.[t+2]:0).times(player.pmt)))}),updates.updateAll(),Date.now()>=nosave.lastSave+1e3*settings.auto_save&&(save(),nosave.lastSave=Date.now())}$(window).on("load",()=>{setNosaveValues(),player=getDefaultPlayerValues(),loadToPlayer(),fixValues(),$("#export").on("click",()=>{let e=localStorage.getItem(settings.game_name),t=new Date,a=t.toLocaleDateString()+" "+t.toLocaleTimeString().replace(RegExp(":","g"),"-");downloadFile(e,settings.savefile_name+" "+a+".txt")}),$("#import").on("click",()=>{let e=prompt("Paste your text here. Your current save will be overwritten.");e&&(player=getDefaultPlayerValues(),loadToPlayer(e),save(),location.reload())}),player.points.forEach(()=>{gameFunctions.add_point_layer(!player.points.length)}),player.points.length||gameFunctions.add_point_layer(),updates.updateAll(),setInterval(mainLoop,getLoopInterval())});